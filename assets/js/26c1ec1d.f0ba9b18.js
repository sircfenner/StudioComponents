"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1084],{84737:e=>{e.exports=JSON.parse('{"functions":[],"properties":[],"types":[{"name":"Props","desc":"","fields":[{"name":"...","lua_type":"CommonProps","desc":""},{"name":"Text","lua_type":"string","desc":""},{"name":"OnChanged","lua_type":"((newText: string) -> ())?","desc":""},{"name":"PlaceholderText","lua_type":"string?","desc":""},{"name":"ClearTextOnFocus","lua_type":"boolean?","desc":""},{"name":"OnFocused","lua_type":"(() -> ())?","desc":""},{"name":"OnFocusLost","lua_type":"((text: string, enterPressed: boolean, input: InputObject) -> ())?","desc":""}],"tags":["Component Props"],"source":{"line":68,"path":"src/Components/TextInput.luau"}}],"name":"TextInput","desc":"A basic input field for entering any kind of text. This matches the appearance of the search\\nboxes in the Explorer and Properties widgets, among other inputs in Studio.\\n\\n| Dark | Light |\\n| - | - |\\n| ![Dark](/components/textinput/dark.png) | ![Light](/components/textinput/light.png) |\\n\\nThis is a controlled component, which means the current text should be passed in to the\\n`Text` prop and a callback value to the `OnChanged` prop which gets run when the user attempts \\ntypes in the input field. For example:\\n\\n```lua\\nlocal function MyComponent()\\n\\tlocal text, setText = React.useState(\\"\\")\\n\\treturn React.createElement(StudioComponents.TextInput, {\\n\\t\\tText = text,\\n\\t\\tOnChanged = setText,\\n\\t})\\nend\\n```\\n\\nThis allows complete control over the text displayed and keeps the source of truth in your own\\ncode. This is helpful for consistency and controlling the state from elsewhere in the tree. It\\nalso allows you to easily filter what can be typed into the text input. For example, to only\\npermit entering lowercase letters:\\n\\n```lua\\nlocal function MyComponent()\\n\\tlocal text, setText = React.useState(\\"\\")\\n\\treturn React.createElement(StudioComponents.TextInput, {\\n\\t\\tText = text,\\n\\t\\tOnChanged = function(newText),\\n\\t\\t\\tlocal filteredText = string.gsub(newText, \\"[^a-z]\\", \\"\\")\\n\\t\\t\\tsetText(filteredText)\\n\\t\\tend,\\n\\t})\\nend\\n```\\n\\nBy default, the height of this component is equal to the value in [Constants.DefaultInputHeight].\\nWhile this can be overriden by props, in order to keep inputs accessible it is not recommended \\nto make the component any smaller than this.","source":{"line":47,"path":"src/Components/TextInput.luau"}}')}}]);