[{"title":"Constants","type":0,"sectionRef":"#","url":"/StudioComponents/api/Constants","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"Constants","url":"/StudioComponents/api/Constants#properties","content":" "},{"title":"DefaultFont​","type":1,"pageTitle":"Constants","url":"/StudioComponents/api/Constants#DefaultFont","content":"&lt;/&gt; Constants.DefaultFont: Font  The default font for text.  "},{"title":"DefaultTextSize​","type":1,"pageTitle":"Constants","url":"/StudioComponents/api/Constants#DefaultTextSize","content":"&lt;/&gt; Constants.DefaultTextSize: number The default size for text.  "},{"title":"DefaultButtonHeight​","type":1,"pageTitle":"Constants","url":"/StudioComponents/api/Constants#DefaultButtonHeight","content":"&lt;/&gt; Constants.DefaultButtonHeight: number The default height of buttons.  "},{"title":"DefaultToggleHeight​","type":1,"pageTitle":"Constants","url":"/StudioComponents/api/Constants#DefaultToggleHeight","content":"&lt;/&gt; Constants.DefaultToggleHeight: number The default height of toggles (Checkbox and RadioButton).  "},{"title":"DefaultInputHeight​","type":1,"pageTitle":"Constants","url":"/StudioComponents/api/Constants#DefaultInputHeight","content":"&lt;/&gt; Constants.DefaultInputHeight: number The default height of text and numeric inputs.  "},{"title":"DefaultSliderHeight​","type":1,"pageTitle":"Constants","url":"/StudioComponents/api/Constants#DefaultSliderHeight","content":"&lt;/&gt; Constants.DefaultSliderHeight: number The default height of sliders.  "},{"title":"DefaultDropdownHeight​","type":1,"pageTitle":"Constants","url":"/StudioComponents/api/Constants#DefaultDropdownHeight","content":"&lt;/&gt; Constants.DefaultDropdownHeight: number The default height of the permanent section of dropdowns.  "},{"title":"DefaultDropdownRowHeight​","type":1,"pageTitle":"Constants","url":"/StudioComponents/api/Constants#DefaultDropdownRowHeight","content":"&lt;/&gt; Constants.DefaultDropdownRowHeight: number The default height of rows in dropdown lists.  "},{"title":"DefaultProgressBarHeight​","type":1,"pageTitle":"Constants","url":"/StudioComponents/api/Constants#DefaultProgressBarHeight","content":"&lt;/&gt; Constants.DefaultProgressBarHeight: number The default height of progress bars.  "},{"title":"DefaultColorPickerSize​","type":1,"pageTitle":"Constants","url":"/StudioComponents/api/Constants#DefaultColorPickerSize","content":"&lt;/&gt; Constants.DefaultColorPickerSize: UDim2  The default window size of color pickers.  "},{"title":"DefaultNumberSequencePickerSize​","type":1,"pageTitle":"Constants","url":"/StudioComponents/api/Constants#DefaultNumberSequencePickerSize","content":"&lt;/&gt; Constants.DefaultNumberSequencePickerSize: UDim2  The default window size of number sequence pickers.  "},{"title":"DefaultDatePickerSize​","type":1,"pageTitle":"Constants","url":"/StudioComponents/api/Constants#DefaultDatePickerSize","content":"&lt;/&gt; Constants.DefaultDatePickerSize: UDim2  The default window size of date pickers. "},{"title":"DropShadowFrame","type":0,"sectionRef":"#","url":"/StudioComponents/api/DropShadowFrame","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"DropShadowFrame","url":"/StudioComponents/api/DropShadowFrame#types","content":" "},{"title":"Props​","type":1,"pageTitle":"DropShadowFrame","url":"/StudioComponents/api/DropShadowFrame#Props","content":"Component Props &lt;/&gt; interface Props { ...: CommonProps children: React.ReactNode }  "},{"title":"ColorPicker","type":0,"sectionRef":"#","url":"/StudioComponents/api/ColorPicker","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"ColorPicker","url":"/StudioComponents/api/ColorPicker#types","content":" "},{"title":"Props​","type":1,"pageTitle":"ColorPicker","url":"/StudioComponents/api/ColorPicker#Props","content":"Component Props &lt;/&gt; interface Props { ...: CommonProps Color: Color3 OnChanged: ((newColor: Color3 ) → ())? }  "},{"title":"Background","type":0,"sectionRef":"#","url":"/StudioComponents/api/Background","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Background","url":"/StudioComponents/api/Background#types","content":" "},{"title":"Props​","type":1,"pageTitle":"Background","url":"/StudioComponents/api/Background#Props","content":"Component Props &lt;/&gt; interface Props { ...: CommonProps children: React.ReactNode }  "},{"title":"MainButton","type":0,"sectionRef":"#","url":"/StudioComponents/api/MainButton","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"MainButton","url":"/StudioComponents/api/MainButton#types","content":" "},{"title":"IconProps​","type":1,"pageTitle":"MainButton","url":"/StudioComponents/api/MainButton#IconProps","content":"&lt;/&gt; interface IconProps { Image: string Size: Vector2 Transparency: number? Color: Color3? UseThemeColor: boolean? Alignment: HorizontalAlignment? }   "},{"title":"Props​","type":1,"pageTitle":"MainButton","url":"/StudioComponents/api/MainButton#Props","content":"Component Props &lt;/&gt; interface Props { ...: CommonProps AutomaticSize: AutomaticSize? OnActivated: (() → ())? Text: string? Icon: IconProps? }  "},{"title":"Label","type":0,"sectionRef":"#","url":"/StudioComponents/api/Label","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Label","url":"/StudioComponents/api/Label#types","content":" "},{"title":"Props​","type":1,"pageTitle":"Label","url":"/StudioComponents/api/Label#Props","content":"Component Props &lt;/&gt; interface Props { ...: CommonProps Text: string TextWrapped: boolean? TextXAlignment: Enum.TextXAlignment? TextYAlignment: Enum.TextYAlignment? TextTruncate: Enum.TextTruncate? TextTransparency: number? TextColor3: Color3? RichText: boolean? MaxVisibleGraphemes: number? TextColorStyle: Enum.StudioStyleGuideColor? children: React.ReactNode }  "},{"title":"DatePicker","type":0,"sectionRef":"#","url":"/StudioComponents/api/DatePicker","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"DatePicker","url":"/StudioComponents/api/DatePicker#types","content":" "},{"title":"Props​","type":1,"pageTitle":"DatePicker","url":"/StudioComponents/api/DatePicker#Props","content":"Component Props &lt;/&gt; interface Props { ...: CommonProps Date: DateTime OnChanged: (newDate: DateTime) → () }  "},{"title":"Checkbox","type":0,"sectionRef":"#","url":"/StudioComponents/api/Checkbox","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Checkbox","url":"/StudioComponents/api/Checkbox#types","content":" "},{"title":"Props​","type":1,"pageTitle":"Checkbox","url":"/StudioComponents/api/Checkbox#Props","content":"Component Props &lt;/&gt; interface Props { ...: CommonProps Value: boolean? OnChanged: (() → ())? Label: string? ContentAlignment: HorizontalAlignment? ButtonAlignment: HorizontalAlignment? }  "},{"title":"CommonProps","type":0,"sectionRef":"#","url":"/StudioComponents/api/CommonProps","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"CommonProps","url":"/StudioComponents/api/CommonProps#types","content":" "},{"title":"CommonProps​","type":1,"pageTitle":"CommonProps","url":"/StudioComponents/api/CommonProps#CommonProps","content":"&lt;/&gt; interface CommonProps { Disabled: boolean? AnchorPoint: Vector2? Position: UDim2? Size: UDim2? LayoutOrder: number? ZIndex: number? }  "},{"title":"LoadingDots","type":0,"sectionRef":"#","url":"/StudioComponents/api/LoadingDots","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"LoadingDots","url":"/StudioComponents/api/LoadingDots#types","content":" "},{"title":"Props​","type":1,"pageTitle":"LoadingDots","url":"/StudioComponents/api/LoadingDots#Props","content":"Component Props &lt;/&gt; interface Props { ...: CommonProps }  "},{"title":"NumberSequencePicker","type":0,"sectionRef":"#","url":"/StudioComponents/api/NumberSequencePicker","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"NumberSequencePicker","url":"/StudioComponents/api/NumberSequencePicker#types","content":" "},{"title":"Props​","type":1,"pageTitle":"NumberSequencePicker","url":"/StudioComponents/api/NumberSequencePicker#Props","content":"Component Props &lt;/&gt; interface Props { ...: CommonProps Value: NumberSequence OnChanged: ((newValue: NumberSequence ) → ())? }  "},{"title":"Button","type":0,"sectionRef":"#","url":"/StudioComponents/api/Button","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Button","url":"/StudioComponents/api/Button#types","content":" "},{"title":"IconProps​","type":1,"pageTitle":"Button","url":"/StudioComponents/api/Button#IconProps","content":"&lt;/&gt; interface IconProps { Image: string Size: Vector2 Transparency: number? Color: Color3? UseThemeColor: boolean? Alignment: HorizontalAlignment? } The Alignment prop is used to configure which side of any text the icon appears on. Left-alignment is the default and center-alignment is not supported. When specifying icon color, at most one of Color and UseThemeColor should be specified.  "},{"title":"Props​","type":1,"pageTitle":"Button","url":"/StudioComponents/api/Button#Props","content":"Component Props &lt;/&gt; interface Props { ...: CommonProps AutomaticSize: AutomaticSize? OnActivated: (() → ())? Text: string? Icon: IconProps? }  "},{"title":"RadioButton","type":0,"sectionRef":"#","url":"/StudioComponents/api/RadioButton","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"RadioButton","url":"/StudioComponents/api/RadioButton#types","content":" "},{"title":"Props​","type":1,"pageTitle":"RadioButton","url":"/StudioComponents/api/RadioButton#Props","content":"Component Props &lt;/&gt; interface Props { ...: CommonProps Value: boolean? OnChanged: (() → ())? Label: string? ContentAlignment: HorizontalAlignment? ButtonAlignment: HorizontalAlignment? }  "},{"title":"NumericInput","type":0,"sectionRef":"#","url":"/StudioComponents/api/NumericInput","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"NumericInput","url":"/StudioComponents/api/NumericInput#types","content":" "},{"title":"Props​","type":1,"pageTitle":"NumericInput","url":"/StudioComponents/api/NumericInput#Props","content":"Component Props &lt;/&gt; interface Props { ...: CommonProps Value: number OnValidChanged: ((n: number) → ())? Min: number? Max: number? Step: number? OnSubmitted: ((n: number) → ())? FormatValue: ((n: number) → string)? Arrows: boolean? Slider: boolean? PlaceholderText: string? ClearTextOnFocus: boolean? OnFocused: (() → ())? OnFocusLost: (( text: string, enterPressed: boolean, input: InputObject ) → ())? }  "},{"title":"PluginProvider","type":0,"sectionRef":"#","url":"/StudioComponents/api/PluginProvider","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"PluginProvider","url":"/StudioComponents/api/PluginProvider#types","content":" "},{"title":"Props​","type":1,"pageTitle":"PluginProvider","url":"/StudioComponents/api/PluginProvider#Props","content":"Component Props &lt;/&gt; interface Props { Plugin: Plugin children: React.ReactNode }  "},{"title":"Dropdown","type":0,"sectionRef":"#","url":"/StudioComponents/api/Dropdown","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Dropdown","url":"/StudioComponents/api/Dropdown#types","content":" "},{"title":"Props​","type":1,"pageTitle":"Dropdown","url":"/StudioComponents/api/Dropdown#Props","content":"Component Props &lt;/&gt; interface Props { ...: CommonProps Items: {DropdownItem} OnItemSelected: ((newItem: string?) → ())? SelectedItem: string? DefaultText: string? RowHeight: number? MaxVisibleRows: number? ClearButton: boolean? }   "},{"title":"DropdownItem​","type":1,"pageTitle":"Dropdown","url":"/StudioComponents/api/Dropdown#DropdownItem","content":"&lt;/&gt; type DropdownItem = string | DropdownItemDetail   "},{"title":"DropdownItemDetail​","type":1,"pageTitle":"Dropdown","url":"/StudioComponents/api/Dropdown#DropdownItemDetail","content":"&lt;/&gt; interface DropdownItemDetail { Id: string Text: string Icon: DropdownItemIcon? }   "},{"title":"DropdownItemIcon​","type":1,"pageTitle":"Dropdown","url":"/StudioComponents/api/Dropdown#DropdownItemIcon","content":"&lt;/&gt; interface DropdownItemIcon { Image: string Size: Vector2 Transparency: number? Color: Color3? UseThemeColor: boolean? }  "},{"title":"Splitter","type":0,"sectionRef":"#","url":"/StudioComponents/api/Splitter","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Splitter","url":"/StudioComponents/api/Splitter#types","content":" "},{"title":"Props​","type":1,"pageTitle":"Splitter","url":"/StudioComponents/api/Splitter#Props","content":"Component Props &lt;/&gt; interface Props { ...: CommonProps Alpha: number OnChanged: ((newAlpha: number) → ())? FillDirection: Enum.FillDirection? MinAlpha: number? MaxAlpha: number? children: { Side0: React.ReactNode?, Side1: React.ReactNode? }? }  "},{"title":"useMouseIcon","type":0,"sectionRef":"#","url":"/StudioComponents/api/useMouseIcon","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"useMouseIcon","url":"/StudioComponents/api/useMouseIcon#types","content":" "},{"title":"mouseIconApi​","type":1,"pageTitle":"useMouseIcon","url":"/StudioComponents/api/useMouseIcon#mouseIconApi","content":"&lt;/&gt; interface mouseIconApi { setIcon: (icon: string) → () getIcon: () → string? clearIcon: () → () }  "},{"title":"ProgressBar","type":0,"sectionRef":"#","url":"/StudioComponents/api/ProgressBar","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"ProgressBar","url":"/StudioComponents/api/ProgressBar#types","content":" "},{"title":"Props​","type":1,"pageTitle":"ProgressBar","url":"/StudioComponents/api/ProgressBar#Props","content":"Component Props &lt;/&gt; interface Props { ...: CommonProps Value: number Max: number? Formatter: (( value: number, max: number ) → string)? }  "},{"title":"useTheme","type":0,"sectionRef":"#","url":"/StudioComponents/api/useTheme","content":"On this page useTheme A hook used internally by components for reading the selected Studio Theme and thereby visually theming components appropriately. It is exposed here so that custom components can use this API to achieve the same effect. Calling the hook returns a StudioTheme instance. For example: local function MyThemedComponent() local theme = useTheme() local color = theme:GetColor( Enum.StudioStyleGuideColor.ScriptBackground, Enum.StudioStyleGuideModifier.Default ) return React.createElement(&quot;Frame&quot;, { BackgroundColor3 = color, ... }) end ","keywords":""},{"title":"About","type":0,"sectionRef":"#","url":"/StudioComponents/docs/intro","content":"","keywords":""},{"title":"Why recreate the Studio interface?​","type":1,"pageTitle":"About","url":"/StudioComponents/docs/intro#why-recreate-the-studio-interface","content":"Closely replicating the built-in user interface has two main advantages: Roblox Studio users recognise these components and know how to use them.Less adjustment required when switching between third-party and built-in interfaces. The design of some built-in user interface components has changed in the lifetime of this project. In some cases, these changes had negative implications for accessiblity or consistency so their previous versions are used here instead. "},{"title":"Plugins created with StudioComponents​","type":1,"pageTitle":"About","url":"/StudioComponents/docs/intro#plugins-created-with-studiocomponents","content":"With wider adoption, using these components to build a plugin will also align it with other third-party plugins in appearance, familiarity, and usability. Some plugins created with StudioComponents include: Archimedes 3, a popular building plugin used to create smooth arcsCollision Groups Editor, an alternative to the built-in editor for Collision GroupsLayers, a tool for working with logical sections of 3D modelsBenchmarker, a performance benchmarking tool for Luau codeLampLight, a tool for baking Global Illumination bounce lighting into scenesMeshVox, a smooth terrain importing and stamping tool info Some of these plugins were built with the earlier Roact version (version 0.x, before react-lua was adopted) or the Fusion port of it. "},{"title":"Migrating from Roact StudioComponents​","type":1,"pageTitle":"About","url":"/StudioComponents/docs/intro#migrating-from-roact-studiocomponents","content":"Existing users of the Roact version looking to migrate their project to React and the current version of StudioComponents should: Follow the react-lua guide for migrating from RoactFollow this project's installation guideAddress any API differences between legacy StudioComponents and this version "},{"title":"ScrollFrame","type":0,"sectionRef":"#","url":"/StudioComponents/api/ScrollFrame","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"ScrollFrame","url":"/StudioComponents/api/ScrollFrame#types","content":" "},{"title":"Props​","type":1,"pageTitle":"ScrollFrame","url":"/StudioComponents/api/ScrollFrame#Props","content":"Component Props &lt;/&gt; interface Props { ...: CommonProps Layout: { ClassName: string, [string]: any }? ScrollingDirection: Enum.ScrollingDirection? PaddingLeft: UDim? PaddingRight: UDim? PaddingTop: UDim? PaddingBottom: UDim? OnScrolled: ((scrollOffset: Vector2 ) → ())? children: React.ReactNode }  "},{"title":"Getting Started","type":0,"sectionRef":"#","url":"/StudioComponents/docs/getting-started","content":"","keywords":""},{"title":"Installation​","type":1,"pageTitle":"Getting Started","url":"/StudioComponents/docs/getting-started#installation","content":""},{"title":"Wally​","type":1,"pageTitle":"Getting Started","url":"/StudioComponents/docs/getting-started#wally","content":"Add studiocomponents to your wally.toml: studiocomponents = &quot;sircfenner/studiocomponents@1.0.0&quot;  "},{"title":"NPM & yarn​","type":1,"pageTitle":"Getting Started","url":"/StudioComponents/docs/getting-started#npm--yarn","content":"Add studiocomponents to your dependencies: npm install studiocomponents  yarn add studiocomponents  Run npmluau. "},{"title":"TabContainer","type":0,"sectionRef":"#","url":"/StudioComponents/api/TabContainer","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"TabContainer","url":"/StudioComponents/api/TabContainer#types","content":" "},{"title":"Tab​","type":1,"pageTitle":"TabContainer","url":"/StudioComponents/api/TabContainer#Tab","content":"&lt;/&gt; interface Tab { LayoutOrder: number Content: React.ReactNode Disabled: boolean? }   "},{"title":"Props​","type":1,"pageTitle":"TabContainer","url":"/StudioComponents/api/TabContainer#Props","content":"Component Props &lt;/&gt; interface Props { ...: CommonProps SelectedTab: string OnTabSelected: ((name: string) → ())? children: {[string]: Tab} }  "},{"title":"Slider","type":0,"sectionRef":"#","url":"/StudioComponents/api/Slider","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Slider","url":"/StudioComponents/api/Slider#types","content":" "},{"title":"Props​","type":1,"pageTitle":"Slider","url":"/StudioComponents/api/Slider#Props","content":"Component Props &lt;/&gt; interface Props { ...: CommonProps Value: number OnChanged: ((newValue: number) → ())? OnCompleted: ((newValue: number) → ())? Min: number Max: number Step: number? Border: boolean? Background: boolean? }  "},{"title":"TextInput","type":0,"sectionRef":"#","url":"/StudioComponents/api/TextInput","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"TextInput","url":"/StudioComponents/api/TextInput#types","content":" "},{"title":"Props​","type":1,"pageTitle":"TextInput","url":"/StudioComponents/api/TextInput#Props","content":"Component Props &lt;/&gt; interface Props { ...: CommonProps Text: string OnChanged: ((newText: string) → ())? PlaceholderText: string? ClearTextOnFocus: boolean? OnFocused: (() → ())? OnFocusLost: (( text: string, enterPressed: boolean, input: InputObject ) → ())? }  "}]